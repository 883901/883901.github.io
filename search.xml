<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[利用github pages搭建个人博客]]></title>
    <url>%2F2019%2F07%2F25%2F%E5%88%A9%E7%94%A8github-pages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[一直想搭建一个博客系统，之前觉得wordpress挺好的，搭建了一个，搭建起来更新几篇文章后就不想更新了，感觉wordpress挺笨重繁琐的，最近一个星期都在找好用的博客系统，发现了hexo系统还可以搭在github pages上，立马来了兴趣，接连1个星期都在学习搭建并且使用好看的next主题， 今天尝试下载分支源文件的时候发现next主题文件夹是空的，之前上传源文件并没有上传成功next主题，百度了半小时也没解决，就想着重新搭一次，反正 config 文件都有备份，然后就想着把搭建流程记下来为以后如果再搭建做参考！ 安装前提安装 Hexo 相当简单。然而在安装前，您必须检查电脑中是否已安装下列应用程序：1.Node.js (Should be at least nodejs 6.9)2.GIT 安装git工具 安装hexo1npm install -g hexo-cli 安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。 123hexo init &lt;folder&gt;cd &lt;folder&gt;npm install 新建完成后，指定文件夹的目录如下： 12345678.├── _config.yml├── package.json├── scaffolds├── source| ├── _drafts| └── _posts└── themes _config.yml 是网站的配置信息，可以在此修改大部分的参数。重装的时候可以用备份的_config.yml直接代替。至此hexo安装完毕,以下是hexo命令： 12345678910hexo init [folder] #新建一个网站。如果没有设置 folder ，Hexo 默认在目前的文件夹建立网站。hexo new [layout] &lt;title&gt; #新建一篇文章。如果没有设置 layout 的话，默认使用 _config.yml 中的 default_layout 参数代替。默认为post文章。hexo new &quot;post title with whitespace&quot; #如果标题包含空格的话，请使用引号括起来。hexo generate #生成静态文件。简写为：hexo ghexo publish [layout] &lt;filename&gt; #发表草稿。hexo server #启动服务器（本地） 简写为： hexo s hexo deploy #简写为：hexo d 部署网站。后面加 -g, --generate 部署之前预先生成静态文件hexo clean #清除缓存文件 (db.json) 和已生成的静态文件 (public)。 更改站点文件不生效时可能需要运行该命令。hexo list &lt;type&gt; #列出网站资料hexo new page [layout] #新建分类页 安装next主题打开终端，切换到Hexo 站点根目录并克隆NexT 主题的最新主分支： 12cd hexogit clone https://github.com/theme-next/hexo-theme-next themes/next 启用NexT与所有Hexo主题一样，下载后，打开站点配置文件，查找theme部分，并将其值更改为next（或其他主题目录名称）。 12HEXO / _config.ymlTHEME: Next 现在您已经安装了NexT主题，接下来我们将验证它是否已正确启用。在更改主题和验证主题之间，我们最好使用hexo clean清理Hexo的缓存。重装时利用备份的_config.yml替换即可。 主题美化 字数统计和阅读时长(网站底部/文章内):1.首先安装插件: 1npm install hexo-symbols-count-time --save 2.然后修改站点配置文件如下: 123456symbols_count_time: separated_meta: true ＃显示属性名称,设为false后只显示图标和统计数字,不显示属性的文字 item_text_post: true ＃显示属性名称,设为false后只显示图标和统计数字,不显示属性的文字 item_text_total: true ＃底部footer是否显示字数统计属性文字(如站点总字数,站点阅读时长 ≈ 1 分钟) awl: 4 ＃计算字数的一个设置,没设置过 wpm: 275 ＃一分钟阅读的字数 添加评论系统 Vanline1.到leancloud 注册账号并创建应用（应用名随便填）。2.点击应用到存储页面创建Class,名称为:Counter权限为：无限制。3.点开设置-》应用key，把里面的appid 和 appkey 填入主题配置文件中： 1234567891011valine: enable: true # 为true时启用评论 appid: # 这里填写上面得到的APP ID 注意空一格再输入ID和key, appkey: # 这里填写上面得到的APP KEY notify: false # 邮件通知 verify: false # 验证码 placeholder: #评论框中预设的文字,随意填写 avatar: mm # gravatar style 头像,采用gravatar头像,到http://cn.gravatar.com/了解 guest_info: nick,mail,link # custom comment header 访客信息,显示在评论框上面,三者可随意选择或全选 pageSize: 10 # pagination size 评论分页大小 visitor: false # 添加打赏:12345reward: enable: true ＃开启 comment: 坚持原创技术分享，您的支持将鼓励我继续创作！ ＃图片上方显示的文本 wechatpay: ＃图片地址 alipay: ＃图片地址 文章加密访问在 /blog/themes/next/layout/_partials/head/head.swig 文件中添加： 12345678910&lt;script&gt; (function()&#123; if(&apos;&#123;&#123; page.password &#125;&#125;&apos;)&#123; if (prompt(&apos;请输入文章密码&apos;) !== &apos;&#123;&#123; page.password &#125;&#125;&apos;)&#123; alert(&apos;密码错误！&apos;); history.back(); &#125; &#125; &#125;)();&lt;/script&gt; 在需要加密的文章的页面顶部(Front matter区域)加入 “password : 设置密码值” 博客添加搜索功能1.安装插件 1npm install hexo-generator-searchdb --save 2.修改主题配置文件： 12local_search: enable: true 页面底部增加总访问量和总访问人数1.到883901.github.io\themes\next\layout_third-party\analytics\busuanzi-counter.swig busuanzi文件下面添加： 123&lt;span id=&quot;busuanzi_container_site_pv&quot;&gt;本站总访问量&lt;span id=&quot;busuanzi_value_site_pv&quot;&gt;&lt;/span&gt;次&lt;/span&gt; &lt;span class=&quot;post-meta-divider&quot;&gt;|&lt;/span&gt; &lt;span id=&quot;busuanzi_container_site_uv&quot;&gt;本站访客数&lt;span id=&quot;busuanzi_value_site_uv&quot;&gt;&lt;/span&gt;人&lt;/span&gt; 2.主题文件下修改： 12345678busuanzi_count: enable: true total_visitors: true total_visitors_icon: total_views: true total_views_icon: post_views: true post_views_icon: eye]]></content>
      <categories>
        <category>NEXT主题</category>
      </categories>
      <tags>
        <tag>github pages</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[将hexo源文件到分支]]></title>
    <url>%2F2019%2F07%2F24%2F%E5%B0%86hexo%E6%BA%90%E6%96%87%E4%BB%B6%E5%88%B0%E5%88%86%E6%94%AF%2F</url>
    <content type="text"><![CDATA[hexo文件搭建好了之后，想到一个问题，如果博客出了什么问题怎么办，就想到把hexo源文件备份到github分支是最好的了. 解决方案1.在github上建立一个仓库，然后把hexo文件夹上传，进行备份。 2.在现有的883901.github.io的repository创建一个分支来管理，具体操作如下： 一：建立分支hexo1.在本地D盘下（位置任意）右键Git bash here，执行以下指令，把883901.github.io项目文件克隆到本地：1git clone git@github.com:883901/883901.github.io.git 2.然后D盘下就会有个883901.github.io的文件夹，里面的文件就是repository上的。3.进入883901.github.io，删除文件夹里除了.git的其他所有文件.4.把hexo原文件夹内的所有文件全部复制到883901.github.io/下.5.创建一个叫hexo（或者blog，名字随意）的分支，并切换到这个分支1git checkout -b hexo 6.添加所有文件到暂存区1git add --all 7.进行提交1git commit -m &quot;&quot; 8.推送hexo分支的文件到github仓库1git push --set-upstream origin hexo 二、发布文章后更新hexo分支方法1.执行以下命令：12345git add . #添加所有文件到暂存区git commit -m &quot;提交一篇博客&quot; #提交git push origin hexo 推送hexo分支到githubgit remote add origin git@github.com:883901/883901.github.io.git 三、换电脑操作方案1.配置好基本的环境，npm install 安装依赖，然后克隆分支到本地1git clone -b hexo git@github.com:883901/883901.github.io.git 环境配置好了，hexo文件克隆到了本地，你就可以按照以前的步骤发博客了]]></content>
      <categories>
        <category>Next主题</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Centos7.3更换ssh默认登陆端口,firewall 开启端口、查询 命令大全]]></title>
    <url>%2F2019%2F07%2F23%2FCentos7-3%E6%9B%B4%E6%8D%A2ssh%E9%BB%98%E8%AE%A4%E7%99%BB%E9%99%86%E7%AB%AF%E5%8F%A3-firewall-%E5%BC%80%E5%90%AF%E7%AB%AF%E5%8F%A3%E3%80%81%E6%9F%A5%E8%AF%A2-%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8%2F</url>
    <content type="text"><![CDATA[Centos7.3更换ssh默认登陆端口vim /etc/ssh/sshd_config 找到Port 22下面添加一行：Port 12345 （你想更改的端口）保存退出。 12systemctl restart sshd.service netstat -ntlp|grep 12345 查看12345端口号监听情况 12345systemctl start firewalld 打开防火墙firewall-cmd --permanent --add-port=12345/tcp 添加端口例外firewall-cmd --permanent --query-port=12345/tcp 查询是否已经开启例外systemctl restart sshdsystemctl restart firewalld.service CentOS7使用firewalld打开关闭防火墙与端口1、firewalld的基本使用 12345启动： systemctl start firewalld关闭： systemctl stop firewalld查看状态： systemctl status firewalld 开机禁用 ： systemctl disable firewalld开机启用 ： systemctl enable firewalld 2.systemctl是CentOS7的服务管理工具中主要的工具，它融合之前service和chkconfig的功能于一体。 123456789启动一个服务：systemctl start firewalld.service关闭一个服务：systemctl stop firewalld.service重启一个服务：systemctl restart firewalld.service显示一个服务的状态：systemctl status firewalld.service在开机时启用一个服务：systemctl enable firewalld.service在开机时禁用一个服务：systemctl disable firewalld.service查看服务是否开机启动：systemctl is-enabled firewalld.service查看已启动的服务列表：systemctl list-unit-files|grep enabled查看启动失败的服务列表：systemctl --failed 3.配置firewalld-cmd 12345查看版本： firewall-cmd --version查看帮助： firewall-cmd --help显示状态： firewall-cmd --state查看所有打开的端口： firewall-cmd --zone=public --list-ports更新防火墙规则： firewall-cmd --reload 12查看区域信息: firewall-cmd --get-active-zones查看指定接口所属区域： firewall-cmd --get-zone-of-interface=eth0 123拒绝所有包：firewall-cmd --panic-on取消拒绝状态： firewall-cmd --panic-off查看是否拒绝： firewall-cmd --query-panic 那怎么开启一个端口呢添加firewall-cmd --zone=public --add-port=80/tcp --permanent （--permanent永久生效，没有此参数重启后失效）重新载入firewall-cmd --reload查看firewall-cmd --zone= public --query-port=80/tcp删除firewall-cmd --zone= public --remove-port=80/tcp --permanent 如何配置开放多端口123firewall-cmd --permanent --zone=public --add-port=10000-65535/tcp firewall-cmd --permanent --zone=public --add-port=10000-65535/udp firewall-cmd --reload]]></content>
      <tags>
        <tag>ssh firewall</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[一键安装最新内核并开启 BBR 脚本]]></title>
    <url>%2F2019%2F07%2F23%2F%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85%E6%9C%80%E6%96%B0%E5%86%85%E6%A0%B8%E5%B9%B6%E5%BC%80%E5%90%AF-BBR-%E8%84%9A%E6%9C%AC%2F</url>
    <content type="text"><![CDATA[本脚本适用环境系统支持：CentOS 6+，Debian 7+，Ubuntu 12+虚拟技术：OpenVZ 以外的，比如 KVM、Xen、VMware 等内存要求：≥128M 关于本脚本1、本脚本已在 Vultr 上的 VPS 全部测试通过。2、当脚本检测到 VPS 的虚拟方式为 OpenVZ 时，会提示错误，并自动退出安装。3、脚本运行完重启发现开不了机的，打开 VPS 后台控制面板的 VNC, 开机卡在 grub 引导, 手动选择内核即可。4、由于是使用最新版系统内核，最好请勿在生产环境安装，以免产生不可预测之后果。 使用方法使用root用户登录，运行以下命令： 1wget --no-check-certificate https://github.com/teddysun/across/raw/master/bbr.sh &amp;&amp; chmod +x bbr.sh &amp;&amp; ./bbr.sh 安装完成后，脚本会提示需要重启 VPS，输入 y 并回车后重启。重启完成后，进入 VPS，验证一下是否成功安装最新内核并开启 TCP BBR，输入以下命令： 1uname -r 查看内核版本，显示为最新版就表示 OK 了 1sysctl net.ipv4.tcp_available_congestion_control 返回值一般为：net.ipv4.tcp_available_congestion_control = bbr cubic reno或者为：net.ipv4.tcp_available_congestion_control = reno cubic bbr 1sysctl net.ipv4.tcp_congestion_control 返回值一般为：net.ipv4.tcp_congestion_control = bbr 1sysctl net.core.default_qdisc 返回值一般为：net.core.default_qdisc = fq 1lsmod | grep bbr 返回值有 tcp_bbr 模块即说明 bbr 已启动。注意：并不是所有的 VPS 都会有此返回值，若没有也属正常。]]></content>
      <tags>
        <tag>BBR</tag>
      </tags>
  </entry>
</search>
